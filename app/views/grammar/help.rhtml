<div class="grammar_side_bar">
  <%= side_bar(@grammars) %>
</div>
<div class="grammar_yield">
  <h1>Help</h1>
  <h2>
    Creating a rule
  </h2>
  <p>
    The rule has three parts. First is the name. Second is the pattern that must be matched by an evaluated string in order to have the optional third part, the translation, applied to it. The pattern is comprised of terminals and other rules. Terminals and rules are separated by a comma and a space. A terminal is often a fixed set of characters and is denoted (for the purposes of this engine) by being placed within front slashes "/", like a regular expression in Perl. This is due to the fact that regexp is used to match the characters in a string at the terminal level, allowing the use of expressions such as "\d*" to be a terminal denoting a string of digits zero more in length. Use the repetition with care, as it can be considered a sloppy and careless way to denote a terminal symbol. On the plus side, it can be used as a shortcut requiring fewer rules.
  </p>
  <p>
    To give an example, the following set of rules covers strings with one "b" surrounded by as many "a"s on the left as there are on the right.
  </p>
  
<code>Name      Pattern         Translation
S1        /a/, S2, /a/
S2        /b/
S2        S1</code>

  <p>
    If there are multiple rules with the same name, the string will be evaluated using the rules in the order they are entered until a match is found or there are no more rules. For example, consider the string "aabaa" with the grammar above. Rule "S1" is used. The string has an "a" at the front and end: "aS2a". Does the center part of the string, "aba", fit rule "S2"? The first S2 rule is evaluated. "aba" does not fit the first definition of b. What about the next S2 definition, which is S1? It starts with and ends with an "a", so far so good. What about the middle part of the string (which is "b")? "b" fits the first definition of S2, so the string "aabaa" fits rule S1. In other terms:
  </p>
  
<code>aabaa => aaS2aa
aaS2aa => aS1a
aS1a => aS2a
aS2a => S1</code>

  <p>
    And in the other direction:
  </p>
  
<code>S1 => aS2a 
aS2a => aS1a
aS1a => aaS2aa
aaS2aa => aabaa</code>

  <p>
    To complicate things slightly, pattern elements are repeatable. This allows arrays of elements, such as parameters to a find_first, to be translated more easily, and not just matched. 
  <p>
</div>